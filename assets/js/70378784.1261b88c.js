"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[347],{63187:e=>{e.exports=JSON.parse('{"functions":[{"name":"clear","desc":"Clears all the logs while updating to get a new log as a starting point.\\r","params":[],"returns":[],"function_type":"method","source":{"line":33,"path":"src/Stir/Rollback.lua"}},{"name":"update","desc":"Tries to append a new log in the rollback and uses it as it\'s new \\nvalue.\\nIf the current value of the state object has the same\\nvalue as the last log, it will simply not append it \\n(except when `force` is true).\\r","params":[{"name":"Val","desc":"","lua_type":"any"},{"name":"force","desc":"","lua_type":"boolean"}],"returns":[],"function_type":"method","source":{"line":45,"path":"src/Stir/Rollback.lua"}},{"name":"get","desc":"Returns a log by index in the rollback.\\nIf `index` is not passed then it will return\\nthe last value that was registered.\\r","params":[{"name":"index","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":59,"path":"src/Stir/Rollback.lua"}},{"name":"list","desc":"Returns all the logs registered in the Rollback.\\r","params":[],"returns":[],"function_type":"method","source":{"line":65,"path":"src/Stir/Rollback.lua"}},{"name":"count","desc":"Returns the total number of logs inside the Rollback.\\r","params":[],"returns":[],"function_type":"method","source":{"line":71,"path":"src/Stir/Rollback.lua"}}],"properties":[],"types":[{"name":"RollbackLog","desc":"A table that is returned by [Rollback:get].\\n`Value` is obviously the value that was registered at that time.\\n`Time` is the time in seconds of when the log was registered relative to the time the Rollback object was created.\\n`Tick` is the *absolute* time of when the log was registered in Unix Epoch.","fields":[{"name":"Value","lua_type":"any","desc":""},{"name":"Time","lua_type":"number","desc":""},{"name":"Tick","lua_type":"number","desc":""}],"source":{"line":25,"path":"src/Stir/Rollback.lua"}}],"name":"Rollback","desc":"Rollback is a very useful class when it comes to debugging,\\nit logs everytime an state object changes it\'s value, alongside\\nproviding the time metrics.\\r","source":{"line":12,"path":"src/Stir/Rollback.lua"}}')}}]);